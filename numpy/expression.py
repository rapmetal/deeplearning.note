# -*- coding:utf-8 -*-
import numpy as np 

'''
    基本运算
'''
a = np.array([1, 3, 5, 8])
b = np.arange(4)
print a
# [1 3 5 8]
print b
# [0 1 2 3]
print a - b
# [1 - 0, 3 - 1, 5 - 2, 8 - 3] = [1, 2, 3, 5]
print b ** 2
# [0^2, 1^2, 2^2, 3^2] = [0, 2, 4, 8]
print 2 * a + 3 * b
# [2 * 1 + 3 * 0, 2 * 3 + 3 * 1, 2 * 5 + 3 * 2, 2 * 8 + 3 * 3]
# = [2, 9, 16, 25]

'''
    矩阵运算
'''
print np.dot(np.array([1, 2, 3, 4]), np.array([4, 3, 2, 1]))
# 一维数组的内积
# 1 * 4 + 2 * 3 + 3 * 2 + 4 * 1 = 20
a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[2, 0], [1, 2], [4, 7]])
print np.dot(a, b)
# 对于二维矩阵，计算真正意义上的矩阵乘积，同线性代数中矩阵乘法的定义。
# dot()返回的是两个数组的点积(dot product)
# 两个数组的点积算法：所得到的数组中的每个元素为，
# 第一个矩阵中与该元素行号相同的元素与第二个矩阵与该元素列号相同的元素，两两相乘后再求和。
# [[1 * 2 + 2 * 1 + 3 * 4, 1 * 0 + 2 * 2 + 3 * 7]
#  [4 * 2 + 5 * 1 + 6 * 4, 4 * 0 + 5 * 2 + 6 * 7]]
# = [[16 25]
#    [37 52]]

'''
    索引，切片和迭代
    · 索引: 取出数组的元素，也即是下标。
    · 切片: 取list中的部分元素采用切片操作。
    · 迭代: 如果给定一个list，我们可以通过for循环来遍历这个list，这种遍历我们称迭代(Iteration)。
'''
def f(x, y):
    return 2*x+y

b = np.fromfunction(f, (5, 4))
print b
#第2行,第3列
print b[2, 3]
#每行的第2个元素
print b[0:5, 1]
#每列的第2和第3个元素
print b[1:3,]